package org.ndx.aadarchi.technology.detector.mappers;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.file.Path;
import java.util.Collection;
import java.util.Properties;
import java.util.logging.Logger;

import org.ndx.aadarchi.technology.detector.model.ArtifactDetails;

public interface MappingGenerator {
	public static final Logger logger = Logger.getLogger(MappingGenerator.class.getName());

	void generateMapping(Collection<ArtifactDetails> artifactDetails, Path resources);

	public default void writeProperties(File output, Properties mappings) {
		try {
			output.getParentFile().mkdirs();
			try (OutputStream outputStream = new FileOutputStream(output)) {
				mappings.store(outputStream, String.format("Mappings generated by %s", getClass().getName()));
			} finally {
				logger.info("Wrote file "+output.getAbsolutePath());
			}
		} catch (IOException e) {
			throw new RuntimeException(String.format("Unable to write artifacts in %s", output.getAbsolutePath()), e);
		}
	}


	public default Properties withPropertiesLoadedFrom(File output) {
		Properties existing = new Properties();
		if(output.exists()) {
			try(InputStream input = new FileInputStream(output)) {
				existing.load(input);
			} catch (IOException e) {
				throw new RuntimeException("Can't read properties from "+output.getAbsolutePath(), e);
			}
		}
		return existing;
	}
}
