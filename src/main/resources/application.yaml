'%dev':
  tech-trends:
    projects:
      per:
        page: 10
        platform: 200
camel:
  threadpool:
    pool-size: 5
    max-pool-size: 10
    max-queue-size: -1
quarkus:
  datasource:
    tech-trendz:
      db-kind: postgresql
      devservices:
        enabled: true
        port: 15432
        volumes:
          "data/database/postgresql": /var/lib/postgresql/data
        reuse: true
        db-name: tech-trendz
        username: tech-trendz
        password: tech-trendz
      health:
        enabled: true
      jdbc:
        max-size: 100
  flyway:
    migrate-at-start: true
    baseline-on-migrate: true
  hawtio:
    authenticationEnabled: false
  hibernate-orm:
    datasource: tech-trendz
    database:
      generation: update
  log:
    console:
      level: DEBUG
    category:
      io.smallrye.graphql.client:
        level: TRACE
        min-level: TRACE
      org.jboss.resteasy.reactive.client.logging:
        level: INFO
  rate-limiter:
    buckets:
      librariesio:
        limits:
          - period: 1m
            permitted-uses: 60
            shared: true
          - period: 1m
            permitted-uses: 60
            shared: true
  rest-client:
    npmjs-api:
      url: https://api.npmjs.org/
    librariesio:
      url: https://libraries.io/api
    logging:
      body-limit: 1024
      scope: request-response
      extensions-api:
        scope: all
  smallrye-graphql-client:
    github:
      header:
        Authorization: Bearer ${tech-trends.github.token}
        Content-Type: application/json; charset=utf-8
      url: https://api.github.com/graphql
tech-trends:
  exporter:
    bigquery:
      project:
        id: tendances-tech-et-opportunites
      technology:
        read_as_stream: false
        read_locally: select * from technology;
        id: tendances-tech-et-opportunites:aadarchi_technology_detector:technology
      # The 02:00 here stands for the Europe/Paris Timezone, I don't know what is its impact ...
      indicator:
        read_locally: |
          select indicator_name,
            indicator_value,
            technology_id,
            concat(to_char(indicator_date, 'YYYY-MM-DD'), ' 02:00') as indicator_date
          from indicator
          order by indicator_date asc, technology_id asc, indicator_name asc;
        find_latest_remote: |
          select max(indicator_date) from aadarchi_technology_detector.indicator;
        id: tendances-tech-et-opportunites:aadarchi_technology_detector:indicator
        read_as_stream: true
      github_stars:
        read_locally: |
          select 
            to_char(star_date, 'YYYY-MM-DD HH:MM:SS') as star_date,
            repo_owner,
            repo_name,
            star_user
          from github_stars
          order by star_date asc, repo_owner asc, repo_name asc, star_user asc;
        find_latest_remote: |
          select max(star_date) from aadarchi_technology_detector.github_stars;
        id: tendances-tech-et-opportunites:aadarchi_technology_detector:github_stars
        log_message: GitHub Stars ‚≠êÔ∏è
        read_as_stream: true
      github_forks:
        read_locally: |
          select 
            to_char(fork_date, 'YYYY-MM-DD HH:MM:SS') as fork_date,
            repo_owner,
            repo_name,
            fork_user
          from github_forks
          order by fork_date asc, repo_owner asc, repo_name asc, fork_user asc;
        find_latest_remote: |
          select max(fork_date) from aadarchi_technology_detector.github_forks;
        id: tendances-tech-et-opportunites:aadarchi_technology_detector:github_forks
        log_message: GitHub Forks üçΩÔ∏è
        read_as_stream: true
  indicators:
    github:
      stars:
        graphql:
          # Notice that history is fetched backwards (from the most recent to the most ancient)
          history: |
            query($owner:String!, $name:String!, $before:String="") {
              repository(owner: $owner, name: $name) {
                stargazers(last: 100, before:$before) {
                  pageInfo {
                    endCursor
                    hasNextPage
                    hasPreviousPage
                    startCursor
                  }
                  edges {
                    starredAt
                    node {
                      login
                    }
                  }
                }
              }
              rateLimit {
                cost
              }
            }
          today: |
            query($owner:String!, $name:String!) {
              repository(owner:$owner, name:$name) {
                stargazerCount
              }
              rateLimit {
                cost
              }
            }
        sql:
          # Build the global indicator from individual stargazers
          indicator: |
            SELECT
              EXTRACT(YEAR FROM STAR_DATE) AS STAR_YEAR,
              EXTRACT(MONTH FROM STAR_DATE) AS STAR_MONTH,
              COUNT(STAR_DATE) AS STARS_BY_MONTH
            FROM
              GITHUB_STARS WHERE REPO_OWNER=:owner AND REPO_NAME=:name GROUP BY EXTRACT(YEAR FROM STAR_DATE), EXTRACT(MONTH FROM STAR_DATE) ;
      forks: # New section for forks
        graphql:
          # Query for total number of forks
          today: | 
            query($owner: String!, $name: String!) {
              repository(owner: $owner, name: $name) {
                forkCount
              }
              rateLimit {
                cost
              }
            }
          history: |
            query($owner: String!, $name: String!, $before: String) {
              repository(owner: $owner, name: $name) {
                forks(last: 100, before: $before) {
                  totalCount
                  nodes {
                    createdAt 
                    owner {
                      login
                    }
                  }
                  pageInfo {
                    hasPreviousPage
                    startCursor
                  }
                }
              }
              rateLimit {
                cost
              }
            }
        sql:
          # Build the global indicator from individual stargazers
          indicator: |
            SELECT
              EXTRACT(YEAR FROM FORK_DATE) AS FORK_YEAR,
              EXTRACT(MONTH FROM FORK_DATE) AS FORK_MONTH,
              COUNT(FORK_DATE) AS FORK_BY_MONTH
            FROM
              GITHUB_FORKS
            WHERE REPO_OWNER=:owner AND REPO_NAME=:name
            GROUP BY EXTRACT(YEAR FROM FORK_DATE), EXTRACT(MONTH FROM FORK_DATE);

  projects:
    per:
      page: 10
      platform: 1000