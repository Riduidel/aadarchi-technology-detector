---
'%dev':
  tech-trends:
    projects:
      per:
        page: 10
        platform: 100
# See https://camel.apache.org/camel-quarkus/3.15.x/user-guide/command-mode.html
# It should stop Camel after the processing of one data batch, but currently fail to do so
#camel:
#  main:
#    durationMaxMessages: 1
quarkus:
  datasource:
    db-kind: h2
    devservices:
      enabled: false
    health:
      enabled: true
    jdbc:
      max-size: 100
      url: jdbc:h2:file:./data/database/h2;AUTO_SERVER=TRUE
  flyway:
    migrate-at-start: true
    baseline-on-migrate: true
  hawtio:
    authenticationEnabled: false
  hibernate-orm:
    database:
      generation: update
  log:
    category:
      io.smallrye.graphql.client:
        level: TRACE
        min-level: TRACE
      org.jboss.resteasy.reactive.client.logging:
        level: WARN
  rate-limiter:
    buckets:
      librariesio:
        limits:
          - period: 1m
            permitted-uses: 60
            shared: true
          - period: 1m
            permitted-uses: 60
            shared: true
  rest-client:
    librariesio:
      url: https://libraries.io/api
    logging:
      body-limit: 1024
      scope: request-response
  smallrye-graphql-client:
    github:
      header:
        Authorization: Bearer ${tech-trends.github.token}
        Content-Type: application/json; charset=utf-8
      url: https://api.github.com/graphql
tech-trends:
  csv:
    folder: data/csv
  indicators:
    github:
      stars:
        graphql:
          # Notice that history is fetched backwards (from the most recent to the most ancient)
          history: |
            query($owner:String!, $name:String!, $before:String="") {
              repository(owner: $owner, name: $name) {
                stargazers(last: 100, before:$before) {
                  pageInfo {
                    endCursor
                    hasNextPage
                    hasPreviousPage
                    startCursor
                  }
                  edges {
                    starredAt
                    node {
                      login
                    }
                  }
                }
              }
            }
          today: |
            query($owner:String!, $name:String!) {
              repository(owner:$owner, name:$name) {
                stargazerCount
              }
            }
        sql:
          # Build the global indicator from individual stargazers
          indicator: |
            SELECT
              EXTRACT(YEAR FROM STAR_DATE) AS STAR_YEAR,
              EXTRACT(MONTH FROM STAR_DATE) AS STAR_MONTH,
              COUNT(STAR_DATE) AS STARS_BY_MONTH
            FROM
              GITHUB_STARS WHERE REPO_OWNER=:owner AND REPO_NAME=:name GROUP BY EXTRACT(YEAR FROM STAR_DATE), EXTRACT(MONTH FROM STAR_DATE) ;
  projects:
    per:
      page: 10
      platform: 1000